# -----------------------------------------------------------------------
#
#  Tokiwa Software GmbH, Germany
#
#  Source code of Fuzion webserver feature Session
#
# -----------------------------------------------------------------------

# Session -- facilities providing the session management for the Fuzion
# webserver
#
module Session (sessions lock_free.Map String Session,
                client list u8,
                old_session option Session) ref is


  # session belongs to which user, if at all?
  # NYI: this is a hack for effect-free thread-safe mutation
  #
  user lock_free.Map util.hashable_unit user
    := (lock_free.Map util.hashable_unit user).empty


  # NYI: hack
  #
  unauthenticated_status util.login_status =>
    util.unauthenticated

  # login state of the session
  # NYI: this is a hack for effect-free thread-safe mutation
  #
  login lock_free.Map util.hashable_unit util.login_status
    := (lock_free.Map util.hashable_unit util.login_status).from_entries [(util.hashable_unit, unauthenticated_status)]


  # activity information
  # NYI: not thread-safe!
  #
  last_activity := (lock_free.Map util.hashable_unit time.date_time).empty
  count_activities := (lock_free.Map util.hashable_unit u64).from_entries [(util.hashable_unit, u64 0)]


  # connection tied to this session for sending events to the client
  #
  connection := (lock_free.Map util.hashable_unit net.connection).empty


  # session history information
  #
  current_page := (lock_free.Map util.hashable_unit String).from_entries [(util.hashable_unit, "index")]
  last_pushed_history :=  (lock_free.Map util.hashable_unit String).empty


  # initialize user and login state
  # NYI: thread-safety!
  #
  match old_session
    nil => unit
    old_s Session =>
      match old_s.user[util.hashable_unit]
        nil => unit
        old_user user => Session.this.user.add util.hashable_unit old_user

      match old_s.login[util.hashable_unit]
        nil => unit
        old_login util.login_status => login.add util.hashable_unit old_login


  # session id
  #
  session_id String := Java.dev.flang.RandomId_static.get Session.safe_number_of_bits


  # put session in global session list
  #
  sessions.add session_id Session.this


  # and log session creation
  #
  log "new session {sessions.size} {session_id} for {client} user {user[util.hashable_unit].bind x->x.login}"


  # log session activity
  # NYI: thread-safety!
  #
  activity =>
    activity_count := count_activities[util.hashable_unit].get 0
    count_activities.add util.hashable_unit (activity_count + 1)
    last_activity.add util.hashable_unit time.now.get


  # login state easy access
  #
  module get_login_status util.login_status =>
    login[util.hashable_unit].get unauthenticated_status


  # send login status to client
  # NYI: thread-safety!
  #
  module send_login_status unit =>
    match login[util.hashable_unit].get
      util.authenticated => send_event "isLoggedIn" user[util.hashable_unit].get.name
      * => send_event "isNotLoggedIn"


  # session status string
  # NYI: thread-safety!
  #
  module status_string =>
    match login[util.hashable_unit].get
      util.unauthenticated => "not logged in"
      util.auth_fail => "failed"
      util.authenticated => "ok: {user[util.hashable_unit].get.name}"


  # send an event on the session's connection
  #
  send_event (event String) =>
    send_event event nil


  # send events along with data on the session's connection
  #
  send_event (event String, html_encoded_data option String) =>
    data := html_encoded_data.get ""
    send_data "event: {event}\ndata: {data}\n\n"


  # send history information about session's visited pages
  # NYI: thread-safety!
  #
  send_push_history =>
    last := last_pushed_history[util.hashable_unit]
    cur := current_page[util.hashable_unit]
    match cur
      nil => _ := last_pushed_history.remove util.hashable_unit
      c String => last_pushed_history.add util.hashable_unit c

    if cur?? && last!! || cur != last
      send_event "pushHistory" "/{cur.get}"


  # send data on the session's connection
  # NYI: thread-safety!
  #
  module send_data (msg String) =>
    match connection[util.hashable_unit]
      nil => log "failed to send {(msg.split "\n").head.get}, connection is nil"
      c net.connection =>
        reset_connection_timer

        r := c.with (outcome unit) lm ()->
          (io.buffered.writer.env.write msg.utf8).error
            >>= _->io.buffered.writer.env.flush

        match r
          unit => unit
          e error => close_connection e


  # resets connection timer
  #
  reset_connection_timer =>
    unit # NYI


  # close session connection
  # NYI: thread-safety!
  #
  close_connection (e error) =>
    log "exception when sending content: {e}"

    match connection[util.hashable_unit]
      nil => unit
      c net.connection =>
        log "closing connection of session: {session_id}"
        match c.close
          unit =>
          e1 error => log "error closing connection: {e1}"
        _ := connection.remove util.hashable_unit


  # does this session have a connection associated?
  #
  module is_connection_ok =>
    connection[util.hashable_unit].ok


  # log a message for this session, either to the general log if
  # the session is not authenticated, or to the users' individual log
  #
  module log (msg String) =>
    match Session.this.user[util.hashable_unit]
      nil => logger.log msg
      u user => u.log msg


  # find a session by id and client
  #
  module type.get (sessions lock_free.Map String Session, id String, c list u8) option Session =>
    match sessions[id]
      nil => nil
      s Session =>
        if s.client = c
          s
        else
          nil


  # find session and attach original session, or create new
  # session
  #
  module type.get (sessions lock_free.Map String Session,
                   old_id, id option String,
                   c list u8) Session =>
    lm.instate_self Session ()->
      res := lm.env.new (option Session) nil
      orig := lm.env.new (option Session) nil

      if old_id??
        orig <- get sessions old_id.get c
      else if id??
        res <- get sessions id.get c

      res.get.get (Session sessions c orig.get)


  # create attribute_map based on the entry provided
  #
  module type.attribute_map(entry String) lock_free.Map String String =>
    map := util.url_encoded.parse_urlencoded_map entry
    res := (lock_free.Map String String).empty
    for pair in map.items do
      if (pair.1.starts_with "\"") && (pair.1.ends_with "\"")
        v := pair.1.substring 1 pair.1.byte_length
        res.add pair.0 v
      else
        res.add pair.0 pair.1
    res


  # extraction of the tag content from the string s
  #
  module type.get_tag(s, tag String) option (lock_free.Map String String) =>
    match s.find tag
      c i32 =>
        match s.find "/>" c+tag.byte_length
          ce i32 =>
            entry := s.substring c+tag.byte_length ce
            attribute_map entry
          nil => nil
      nil => nil


  # return the html content in the page
  #
  module strip_html(page String) String =>
    if page.ends_with ".html" || page.ends_with ".htm"
      page.substring 0 (page.find ".").get
    else if page = ""
      "index"
    else
      page


  # added the html extenson to the page string
  #
  module add_html(page String) String =>
    if !jflang.Content_static.isKnownPreformattedFile page
      page + ".html"
    else
      page


  # check if the html string have a tag "</html>"
  #
  module has_embedded_html(html String) bool =>
    !(html.find "<!DOCTYPE html>").is_nil && !(html.find "</html>").is_nil


  # check if the html structure correct than replace the iframe tag
  #
  module embedded_html_in_frame(html String) option String =>
    match html.find "<!DOCTYPE html>"
      c i32 =>
        match html.find "</html>"
          c2 i32 =>
            embedded_html := html.substring c c2+7
            html.replace  embedded_html """
              <div class="responsive-container aspect-16-by-9">
                <iframe class="responsive-iframe" sandbox="allow-same-origin allow-scripts" id='iframe-embedded-content' data-src-doc-content="{(embedded_html.replace "&quot;" "REPLACEDHTMLQUOTE").replace "" "REPLACEDDOUBLEQUOTE"}">
                </iframe>
              </div>
              """
          nil => nil
      nil => nil


  # NYI
  #
  module send_data(event,field_name,field_data String) String =>
    msg := "event: {event}\n"+(util.url_encoded.encode_html_data field_name+"\n"+field_data)+"\n"
    msg


  # NYI: comment
  #
  module append_data(data String) String =>
    entry := data.split "\n"
    for msg := "",msg + "data: {l}\n"
        l in entry
    else
      msg


  # return the "attractivelink" template
  #
  module attractive_link(to,title String) String =>
    get_template "attractivelink.html" ["##LINK##","/{to}","##TITLE##",title].as_list


  # return the "page" template
  #
  module page_link(to,title String) String =>
    get_template "page.html" ["##LINK##","/{to}","#TITLE##",title].as_list


  # dispatch the html content
  #
  module doc_links(doc_file_name String) String =>
    parts := doc_file_name.split "/"
    if parts.count < 2
      ""
    else
      for res := "", res +  """
                              <a class="shylink shylinkfix" href="/docs/{doc_path}">
                                  {name}
                              </a> â€¢
                            """
          part in parts
          name0 := Java.java.net.URLDecoder_static.decode part "UTF-8"
          name1 := name0.get.split "("
          name := name1[0]
          end := (doc_file_name.find part).get + parts.count
          doc_path := doc_file_name.substring 0
      else
        res


  # NYI
  #
  module get_item_recent_commits String =>
    "NYI"


  # read lines from the path and return them in a list of string
  #
  module read_all_lines(file Java.java.nio.file.Path, return_null_on_error,pretty_print bool) list String =>
    res := lm.instate_self (outcome (list String)) ()->
      io.file.use (list String) lm file.as_string io.file.mode.read ()->
        data := io.buffered.read_fully lm
        lines := String.from_bytes data
        lines.split "\n"
    match res
      e error => panic "error reading from path {file}: {e}"
      re list String => re


  # returns the content of the file
  #
  module get_template(filename String,repl list String) String =>
    p := (jflang.Content_static.template filename).__fileToSend
    if p.is_null
      "--template {filename} not found--"
    else
      i := mut 0
      lines := read_all_lines p false false
      for res := "",res + rs + "\n"
          rs in lines
          while i.get < repl.count do
            _ := rs.replace repl[i.get] repl[i.get + 1]
            i <- i.get+1
      else
        res


  # make sure no one is stealing a session by brute-force
  #
  type.safe_number_of_bits => 128


# local mutate effect used in this file
#
lm : mutate is
