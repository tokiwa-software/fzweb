# -----------------------------------------------------------------------
#
#  Tokiwa Software GmbH, Germany
#
#  Source code of Fuzion webserver feature Session
#
# -----------------------------------------------------------------------

# Session -- facilities providing the session management for the Fuzion
# webserver
#
module Session (sessions lock_free.Map String Session,
                client list u8,
                old_session option Session) ref is


  # session belongs to which user, if at all?
  # NYI: this is a hack for effect-free thread-safe mutation
  #
  module user lock_free.Map util.hashable_unit user
    := (lock_free.Map util.hashable_unit user).empty


  # NYI: hack
  #
  unauthenticated_status util.login_status =>
    util.unauthenticated

  # login state of the session
  # NYI: this is a hack for effect-free thread-safe mutation
  #
  login lock_free.Map util.hashable_unit util.login_status
    := (lock_free.Map util.hashable_unit util.login_status).from_entries [(util.hashable_unit, unauthenticated_status)]


  # activity information
  # NYI: not thread-safe!
  #
  last_activity := (lock_free.Map util.hashable_unit time.date_time).empty
  count_activities := (lock_free.Map util.hashable_unit u64).from_entries [(util.hashable_unit, u64 0)]


  # connection tied to this session for sending events to the client
  #
  connection := (lock_free.Map util.hashable_unit net.connection).empty


  # session history information
  #
  current_page := (lock_free.Map util.hashable_unit document2).from_entries [(util.hashable_unit, document2 "index" Session.this)]
  last_pushed_history :=  (lock_free.Map util.hashable_unit document2).empty


  # initialize user and login state
  # NYI: thread-safety!
  #
  match old_session
    nil => unit
    old_s Session =>
      match old_s.user[util.hashable_unit]
        nil => unit
        old_user user => Session.this.user.put util.hashable_unit old_user

      match old_s.login[util.hashable_unit]
        nil => unit
        old_login util.login_status => login.put util.hashable_unit old_login


  # session id
  #
  module session_id String := Java.dev.flang.RandomId_static.get Session.safe_number_of_bits


  # put session in global session list
  #
  sessions.put session_id Session.this


  # and log session creation
  #
  log "new session {sessions.size} {session_id} for {client} user {user[util.hashable_unit].bind x->x.login}"


  # log session activity
  # NYI: thread-safety!
  #
  activity =>
    activity_count := count_activities[util.hashable_unit].get 0
    count_activities.put util.hashable_unit (activity_count + 1)
    last_activity.put util.hashable_unit time.now.get


  # authenticate the session with a user account
  # NYI: thread-safety!
  #
  module login (name, password String) =>
    activity

    match user.get name password
      error =>
        login.put util.hashable_unit util.auth_fail
      u user =>
        Session.this.user.put util.hashable_unit u
        login.put util.hashable_unit util.authenticated

    send_content


  # logout the session
  # NYI: thread-safety!
  #
  module logout =>
    activity

    _ := user.remove util.hashable_unit
    login.put util.hashable_unit util.unauthenticated

    send_content


  # login state easy access
  #
  module get_login_status util.login_status =>
    login[util.hashable_unit].get unauthenticated_status


  # access to session user
  #
  module get_user option user =>
    Session.this.user[util.hashable_unit]


  # send login status to client
  # NYI: thread-safety!
  #
  module send_login_status unit =>
    match login[util.hashable_unit].get
      util.authenticated => send_event "isLoggedIn" user[util.hashable_unit].get.name
      * => send_event "isNotLoggedIn"


  # session status string
  # NYI: thread-safety!
  #
  module status_string =>
    match login[util.hashable_unit].get
      util.unauthenticated => "not logged in"
      util.auth_fail => "failed"
      util.authenticated => "ok: {user[util.hashable_unit].get.name}"


  # send an event on the session's connection
  #
  send_event (event String) =>
    send_event event nil


  # send events along with data on the session's connection
  #
  send_event (event String, html_encoded_data option String) =>
    data := html_encoded_data.get ""
    send_data "event: {event}\ndata: {data}\n\n"


  # send history information about session's visited pages
  # NYI: thread-safety!
  #
  send_push_history =>
    last := last_pushed_history[util.hashable_unit]
    cur := current_page[util.hashable_unit]
    match cur
      nil => _ := last_pushed_history.remove util.hashable_unit
      c document2 => last_pushed_history.put util.hashable_unit c

    if cur?? && last!! || cur.as_equatable != last.as_equatable
      send_event "pushHistory" "/{cur.get.page}"


  # send data on the session's connection
  # NYI: thread-safety!
  #
  module send_data (msg String) =>
    match connection[util.hashable_unit]
      nil => log "failed to send {(msg.split "\n").head.get}, connection is nil"
      c net.connection =>
        reset_connection_timer

        r := lm.instate_self (outcome unit) ()->
          c.with (outcome unit) lm ()->
            io.buffered lm
              .writer.env
              .write msg.utf8
              .error
              .and_then _->(io.buffered lm).writer.env.flush

        match r
          unit => unit
          e error => close_connection e


  # resets connection timer
  #
  reset_connection_timer =>
    unit # NYI


  # associate a session with a connection
  # NYI: thread-safety!
  #
  module set_connection (c net.connection) =>
    reset_connection_timer

    match connection[util.hashable_unit]
      nil =>
        log "Set original connection"
        connection.put util.hashable_unit c
        send_login_status
      net.connection =>
        log "Set new connection"
        close_connection unit
        connection.put util.hashable_unit c
        send_content
        send_login_status


  # close session connection
  # NYI: thread-safety!
  #
  close_connection (o outcome unit) =>
    match o
      e error => log "exception when sending content: {e}"
      unit =>

    match connection[util.hashable_unit]
      nil => unit
      c net.connection =>
        log "closing connection of session: {session_id}"
        match c.close
          unit =>
          e error => log "error closing connection: {e}"
        _ := connection.remove util.hashable_unit


  # does this session have a connection associated?
  #
  module is_connection_ok =>
    connection[util.hashable_unit].ok


  # log a message for this session, either to the general log if
  # the session is not authenticated, or to the users' individual log
  #
  module log (msg String) =>
    match Session.this.user[util.hashable_unit]
      nil => logger.log msg
      u user => u.log msg


  # find a session by id and client
  #
  module type.get (sessions lock_free.Map String Session, id String, c list u8) option Session =>
    match sessions[id]
      nil => nil
      s Session =>
        if s.client.as_equatable = c.as_equatable
          s
        else
          nil


  # find session and attach original session, or create new
  # session
  #
  module type.get (sessions lock_free.Map String Session,
                   old_id, id option String,
                   c list u8) Session =>
    res := mut (option Session) nil
    orig := mut (option Session) nil

    if old_id??
      orig <- get sessions old_id.get c
    else if id??
      res <- get sessions id.get c

    res.get.get (Session sessions c orig.get)


  # create attribute_map based on the entry provided
  #
  module type.attribute_map(entry String) lock_free.Map String String =>
    map := util.url_encoded.parse_urlencoded_map entry
    res := (lock_free.Map String String).empty
    for pair in map.items do
      if (pair.1.starts_with "\"") && (pair.1.ends_with "\"")
        v := pair.1.substring 1 pair.1.byte_length
        res.put pair.0 v
      else
        res.put pair.0 pair.1
    res


  # extraction of the tag content from the string s
  #
  module type.get_tag(s, tag String) option (lock_free.Map String String) =>
    match s.find tag
      c i32 =>
        match s.find "/>" c+tag.byte_length
          ce i32 =>
            entry := s.substring c+tag.byte_length ce
            attribute_map entry
          nil => nil
      nil => nil


  # send data (three args)
  # NYI: rename to send_event?
  #
  module send_data(event, field_name, field_data String) =>
    html_encoded_data := util.url_encoded.encode_html_data "{field_name}\n{field_data}"
    send_event event html_encoded_data


  # NYI: comment, revisit (originally intended for StringBuilder)
  #
  prepend_data(data array String) String =>
    res :=
      data
        .flat_map (.split "\n")
        .map (d -> "data: $d")
    String.join res "\n"


  module add_session_info_to_html_bytes (b array u8) array u8 =>
    # NYI: UNDER DEVELOPMENT: don't use mut
    s := mut (String.from_bytes b)
    activity
    # NYI
    # - ByteArray from flang_dev
    s <- s.get.replace "##SESSION_ID##" session_id
    match current_page[util.hashable_unit]
      cp document2 =>
        s <- s.get.replace "##URL##" "/{cp.page}"
        s <- s.get.replace "##CONTENT##" (String.join cp.get_content "\n")
      nil =>
    s.get.utf8.as_array


  # send current page content to the client
  #
  module send_content =>
    data := match current_page[util.hashable_unit]
      current_document document2 => prepend_data current_document.get_content
      nil => "data: "

    msg := """
      id: 0
      event: content
      {data}\n
    """

    send_data msg
    send_push_history


  # set the current page
  #
  module set_current (page String) =>
    p := document.strip_html page
    d := document2 p Session.this
    current_page.put util.hashable_unit d


  # make sure no one is stealing a session by brute-force
  #
  type.safe_number_of_bits => 128


# local mutate effect used in this file
#
lm : mutate is
