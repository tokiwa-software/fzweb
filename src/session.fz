# -----------------------------------------------------------------------
#
#  Tokiwa Software GmbH, Germany
#
#  Source code of Fuzion webserver feature session
#
# -----------------------------------------------------------------------

# session -- facilities providing the session management for the Fuzion
# webserver
#
module session is

  # create attribute_map based on the entry provided
  #
  module attribute_map(entry String) lock_free.map String String =>
    map := util.url_encoded.parse_urlencoded_map entry
    res := (lock_free.map String String).empty
    for pair in map.items do
      if (pair.1.starts_with "\"") && (pair.1.ends_with "\"")
        v := pair.1.substring 1 pair.1.byte_length
        res.add pair.0 v
      else
        res.add pair.0 pair.1
    res

  # extraction of the tag content from the string s
  #
  module get_tag(s String, tag String) option(lock_free.map String String) =>

    match s.find tag
      c i32 =>
        match s.find "/>" c+tag.byte_length
          ce i32 =>
            entry := s.substring c+tag.byte_length ce
            attribute_map entry
          nil => nil
      nil => nil

  # return the html content in the page
  #
  module strip_html(page String) String =>
    if page.ends_with ".html" || page.ends_with ".htm"
      page.substring 0 (page.find ".").get
    else if page = ""
      "index"
    else
      page

  # added the html extenson to the page string
  #
  module add_html(page String) String =>
    if !jflang.Content_static.isKnownPreformattedFile page
      page + ".html"
    else
      page

  # check if the html string have a tag "</html>"
  #
  module has_embedded_html(html String) bool =>
    !(html.find "<!DOCTYPE html>").is_nil && !(html.find "</html>").is_nil

  # check if the html structure correct than replace the iframe tag
  #
  module embedded_html_in_frame(html String) option String =>
    match html.find "<!DOCTYPE html>"
      c i32 =>
        match html.find "</html>"
          c2 i32 =>
            embedded_html := html.substring c c2+7
            html.replace  embedded_html """
              <div class="responsive-container aspect-16-by-9">
                <iframe class="responsive-iframe" sandbox="allow-same-origin allow-scripts" id='iframe-embedded-content' data-src-doc-content="{(embedded_html.replace "&quot;" "REPLACEDHTMLQUOTE").replace "" "REPLACEDDOUBLEQUOTE"}">
                </iframe>
              </div>
              """
          nil => nil
      nil => nil

  # NYI
  #
  module send_data(event,field_name,field_data String) String =>
    msg := "event: {event}\n"+(util.url_encoded.encode_html_data field_name+"\n"+field_data)+"\n"
    msg

  #
  #
  module append_data(data String) String =>
    entry := data.split "\n"
    for msg := "",msg + "data: {l}\n"
        l in entry
    else
      msg

  # return the "attractivelink" template
  #
  module attractive_link(to,title String) String =>
    get_template "attractivelink.html" ["##LINK##","/{to}","##TITLE##",title].as_list

  #
  # return the "page" template
  module page_link(to,title String) String =>
    get_template "page.html" ["##LINK##","/{to}","#TITLE##",title].as_list

  # dispatch the html content
  #
  module doc_links(doc_file_name String) String =>
    parts := doc_file_name.split "/"
    if parts.count < 2
      ""
    else
      for res := "", res +  """
                              <a class="shylink shylinkfix" href="/docs/{doc_path}">
                                  {name}
                              </a> â€¢
                            """
          part in parts
          name0 := Java.java.net.URLDecoder_static.decode part "UTF-8"
          name1 := name0.get.split "("
          name := name1[0]
          end := (doc_file_name.find part).get + parts.count
          doc_path := doc_file_name.substring 0
      else
        res

  #
  # NYI
  module get_item_recent_commits String =>
    "NYI"

  #
  # read lines from the path and return them in a list of string
  module read_all_lines(file Java.java.nio.file.Path, return_null_on_error,pretty_print bool) list String =>
    lm : mutate is
    res := lm.instate_self (outcome (list String)) ()->
      io.file.use (list String) lm file.as_string io.file.mode.read ()->
        data := io.buffered.read_fully lm
        lines := String.from_bytes data
        lines.split "\n"
    match res
      e error => panic "error reading from path: {file}"
      re list String => re

  #
  # returns the content of the file
  module get_template(filename String,repl list String) String =>
    p := (jflang.Content_static.template filename).__fileToSend
    if p.is_null
      "--template {filename} not found--"
    else
      i := mut 0
      lines := read_all_lines p false false
      for res := "",res + rs + "\n"
          rs in lines
          while i.get < repl.count do
            _ := rs.replace repl[i.get] repl[i.get + 1]
            i <- i.get+1
      else
        res
