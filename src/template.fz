# -----------------------------------------------------------------------
#
#  Tokiwa Software GmbH, Germany
#
#  Source code of Fuzion webserver feature template
#
# -----------------------------------------------------------------------

# template -- features for working with templates
#
module template is


  # looks for a file named `filename` in the `templates/` folder
  # and applies the replacments given in the list `repl`
  #
  apply (filename String, repl Sequence (String, String)) String =>
    not_found := "--template {filename} not found--"
    match content.template filename
      template_id identifier =>
        match template_id.file_to_send
          p path =>
            for
              res := util.read_file_as_string p .get "", res.replace r.values.0 r.values.1
              r in repl
            else
              res
          nil => not_found
      * => not_found


  # given a path and a destination, link to the destination in the path,
  # if there is one.
  #
  # if there is no path, just link to the destination as is
  #
  module link (p option path, dest String) String =>
    p.bind (.resolve dest .as_string)
     .or_else dest


  # apply the given parameters to the `attractivelink.html` template
  #
  module attractive_link (to, title String) String =>
    apply "attractivelink.html" [("##LINK##" ,"/{to}"), ("##TITLE##", title)].as_list


  # apply the given parameters to the `page.html` template
  #
  module page_link (to, title String) String =>
    apply "page.html" [("##LINK##", "/{to}"), ("##TITLE##", title)]


  # create a navigation link to the given path and destination
  #
  module nav_link (p option path,
                   dest option String,
                   sym, aria_label String) String =>
    match dest
      nil =>
        apply "navigation_dead.html" [
            ("##LINK##", "/".as_string),
            ("##TITLE##", sym),
            ("##ARIA##", aria_label)
          ]
      d String =>
        apply "navigation.html" [
            ("##LINK##", "/{link p.get d}"),
            ("##TITLE##", sym),
            ("##ARIA##", aria_label)
          ]


  # dispatch the html content
  #
  module doc_links (doc_file_name String) String =>
    parts := doc_file_name
      .split "/"
      .as_array
    if parts.count < 2
      ""
    else
      for res := "", res +  """
                              <a class="shylink shylinkfix" href="/docs/{doc_path}">
                                  {name}
                              </a> â€¢
                            """
          part in parts
          name := encodings.percent
            .decode_as_str part
            .get
            .split "("
            .first
            .get
          end := (doc_file_name.find part).get + parts.count
          doc_path := doc_file_name.substring 0
      else
        res
