# -----------------------------------------------------------------------
#
#  Tokiwa Software GmbH, Germany
#
#  Source code of Fuzion webserver feature document
#
# -----------------------------------------------------------------------

# document -- features used to work with documents served by the webserver
#
module document is

  # takes a page filename and removes the HTML suffix, or returns
  # index if the filename is empty
  #
  module strip_html(page String) String =>
    if page.ends_with ".html" || page.ends_with ".htm"
      page.substring 0 (page.find ".").get
    else if page = ""
      "index"
    else
      page


  # added the html extension to the page filename
  #
  module add_html(page String) String =>
    if !content.is_known_preformatted_file page
      page + ".html"
    else
      page


  # read lines from the path and return them in a list of string
  # NYI: pretty printing
  #
  module read_all_lines (file Java.java.nio.file.Path,
                         return_nil_on_error, pretty_print bool)
                        option (list String) =>
    res := io.file.use (list String) file.toString io.file.mode.read ()->
      data := (io.buffered io.file.file_mutate).read_fully
      lines := String.from_bytes data
      lines.split "\n"

    match res
      e error =>
        logger.log "error reading from path {file.toString}: {e}"
        if return_nil_on_error
          nil
        else
          ["--error reading file--"].as_list
      re list String => re


  # same as read_all_lines (3 args) but without the option
  # for pretty printing
  #
  read_all_lines (file Java.java.nio.file.Path,
                  return_nil_on_error bool)
                 option (list String) =>
    read_all_lines file return_nil_on_error false


  # same as read_all_lines (2 args) but without the option of
  # returning nil on error
  #
  module read_all_lines (file Java.java.nio.file.Path) list String =>
    (read_all_lines file false).get
