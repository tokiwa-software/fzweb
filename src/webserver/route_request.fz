# -----------------------------------------------------------------------
#
#  Tokiwa Software GmbH, Germany
#
#  Source code of Fuzion webserver feature route_request
#
# -----------------------------------------------------------------------

# take the unprocessed path as determined by the webserver,
# and extract the actual path out of it
#
decode_path (raw_path String) String =>
  uri := Java.java.net.URI_static.new "none" "none" raw_path ""
  match uri
    u Java.java.net.URI => u.getPath
    error => ""


# check if the given client has registered within the last ten minutes
#
has_registered_recently (client Java.java.net.InetAddress) bool =>
  # NYI
  false

# helper feature to convert java map to fuzion map
#
module fuzion_to_java_map(fz_map lock_free.map String String) Java.java.util.TreeMap =>
  # Create an instance of Java's Map
  jv_map := Java.java.util.TreeMap.new
  # Iterate over items in the Fuzion map and put them into the Java Map
  for p in fz_map.items do
    key := Java.java.lang.__jString.new p.0
    value0 := Java.java.lang.__jString.new p.1
    _ := jv_map.put key value0
  jv_map

# create a user account given the data submitted via the form content
#
do_register (client Java.java.net.InetAddress, form_data lock_free.map String String) String =>
  if has_registered_recently client
    "<div class='text-center'>Only one registration per IP possible within 10 minutes.</div>"
  else
    registration_result := jflang.User_static.register (fuzion_to_java_map form_data)
    # NYI: registration rate limit
    match registration_result
      rr Java.java.lang.__jString => rr.as_string
      e error => "<div class='text-center'>*** Registration failed: {e}</div>"


# routes a given request to the code that handles it,
# and returns the response
#
module route_request (raw_path, cmd String, client Java.java.net.InetAddress, form_data (lock_free.map String String), query String) response =>
  if cmd != "GET" && cmd != "HEAD" && cmd != "POST"
    _ := say "*** unknown request: {cmd}"
    response 501 "" (list i8).empty
  else
    sessid_original := form_data["originalsessionid"].get ""
    sessid := form_data["sessionid"].get ""
    s := jflang.Session_static.get sessid_original sessid client

    if raw_path.ends_with "/"
      new_path := raw_path + "index.html"
      route_request new_path cmd client form_data query
    else if raw_path = "/login"
      login := form_data["login"].get ""
      pw := form_data["password"].get ""
      if !login.is_empty && !pw.is_empty
        s.login login pw
      send_ok_or_reload cmd s s.statusString
    else if raw_path = "/logout"
      _ := s.logout
      send_ok_or_reload cmd s s.statusString
    else if cmd = "POST" && raw_path = "/register"
      send_ok cmd (do_register client form_data)
    else if cmd = "POST" && raw_path = "/delete_account"
      send_ok cmd (jflang.User_static.triggerAccountDeletion client (fuzion_to_java_map form_data))
    else if raw_path = "/confirm_account_deletion"
      s_q := util.split_query query
      webserver.this.log s "got confirm_account_deletion"
      match user.complete_account_deletion (s_q["token"].get "")
        r unit =>
          webserver.this.log s "got confirm_account_deletion send 302 success"
          response 302 "Location: /account_deletion_successful" (list i8).empty
        e error =>
          webserver.this.log s "got confirm_account_deletion send 302 failure"
          logger.log e.as_string
          response 302 "Location: /account_deletion_failed" (list i8).empty
    else if raw_path = "/confirm_registration"
      s_q := util.split_query query
      webserver.this.log s "got confirm_registration"
      match user.complete_registration (s_q["username"].get "") (s_q["token"].get "")
        r unit =>
          webserver.this.log s "got confirm_registration send 302 success"
          response 302 "Location: /registration_successful" (list i8).empty
        e error =>
          webserver.this.log s "got confirm_registration send 302 failure: "+e
          response 302 "Location: /registration_failed" (list i8).empty

    else if raw_path = "/robots.txt"
      res := content.templates_dir.resolve "robots.txt"
      lm : mutate is
      x := lm.instate_self (outcome (array u8)) ()->
        io.file.use (array u8) lm res.toString io.file.mode.read ()->
          io.buffered.read_fully lm

      match x
        robots_txt array u8 =>
          send_ok cmd (String.from_bytes robots_txt)
        e error =>
          jflang.Logger_static.log "robots.txt could not be read."
          response 500 "" (list i8).empty

    else if raw_path = "/goto"
      # NYI
      send_ok_or_reload cmd s
    else if raw_path = "/run"
      code := form_data["code"].get ""
      results_to := form_data["resultsTo"].get ""
      jflang.Runner_static.run s code results_to true
      send_ok_or_reload cmd s
    else if raw_path = "/runeff"
      code := form_data["code"].get ""
      results_to := form_data["resultsTo"].get ""
      jflang.Runner_static.run s code results_to true
      send_ok_or_reload cmd s
    else if raw_path = "/playground"
      if s.getLoginStatus.equals jflang.LoginStatus_static.__k__in
        jflang.Playground_static.start s
        send_ok_or_reload cmd s
      else
        response 403 "" (list i8).empty
    else if raw_path = "/events"
      # send one byte to trigger javascript event
      b array i8 := [0]
      response 200 "Cache-Control: no-cache\nConnection: keep-alive\nContent-Type: text/event-stream\n" b s
    else if raw_path = "/contents"
      s.sendContent
      s.sendLoginStatus
      send_ok_or_reload cmd s
    else if raw_path = "/api/benchmark/logs"
      # NYI:
      response 500 "" (list i8).empty
    else
      next_session := jflang.Session_static.get sessid_original sessid client
      jflang.webserver_static.PerformDirectLogin s (fuzion_to_java_map form_data)
      path := decode_path raw_path
      content_identifier := jflang.Content_static.getContents s path
      if content_identifier.equals jflang.Content_static.FORBIDDEN
        webserver.this.log s "*** forbidding access to absolute or non-normalized path {path}."
        response 403 "" (list i8).empty
      else if content_identifier.equals jflang.Content_static.MISSING
        webserver.this.log s "*** error: requested file {path} does not exist"
        response 404 "" (list i8).empty
      else
        send_content s cmd content_identifier
