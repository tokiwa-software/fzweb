# -----------------------------------------------------------------------
#
#  Tokiwa Software GmbH, Germany
#
#  Source code of Fuzion webserver feature route_request
#
# -----------------------------------------------------------------------

# take the unprocessed path as determined by the webserver,
# and extract the actual path out of it
#
decode_path (raw_path String) String =>
  match Java.java.net.URI_static.new "none" "none" raw_path ""
    u Java.java.net.URI => u.getPath
    error => ""


# check if the given client has registered within the last ten minutes
#
has_registered_recently (client list u8) bool =>
  # NYI
  false


# create a user account given the data submitted via the form content
#
do_register (client list u8, form_data lock_free.Map String String) String =>
  if has_registered_recently client
    "<div class='text-center'>Only one registration per IP possible within 10 minutes.</div>"
  else
    registration_result := user.register form_data
    # NYI: registration rate limit
    match registration_result
      rr String => rr
      e error => "<div class='text-center'>*** Registration failed: {e}</div>"


# routes a given request to the code that handles it,
# and returns the response
#
module route_request (raw_path, cmd String, client list u8, form_data (lock_free.Map String String), query String) response =>
  if cmd != "GET" && cmd != "HEAD" && cmd != "POST"
    _ := say "*** unknown request: {cmd}"
    response 501 "" (list i8).empty
  else
    sessid_original := form_data["originalsessionid"]
    sessid := form_data["sessionid"]
    s := Session.get sessions sessid_original sessid client

    if raw_path.ends_with "/"
      new_path := raw_path + "index.html"
      route_request new_path cmd client form_data query
    else if raw_path = "/login"
      send_nyi
    else if raw_path = "/logout"
      send_nyi
    else if cmd = "POST" && raw_path = "/register"
      send_ok cmd (do_register client form_data)
    else if cmd = "POST" && raw_path = "/delete_account"
      send_ok cmd (user.trigger_account_deletion client form_data)
    else if raw_path = "/confirm_account_deletion"
      s_q := util.split_query query
      webserver.this.log s "got confirm_account_deletion"
      match user.complete_account_deletion (s_q["token"].get "")
        unit =>
          webserver.this.log s "got confirm_account_deletion send 302 success"
          response 302 "Location: /account_deletion_successful" (list i8).empty
        e error =>
          webserver.this.log s "got confirm_account_deletion send 302 failure"
          logger.log e.as_string
          response 302 "Location: /account_deletion_failed" (list i8).empty
    else if raw_path = "/confirm_registration"
      s_q := util.split_query query
      webserver.this.log s "got confirm_registration"
      match user.complete_registration (s_q["username"].get "") (s_q["token"].get "")
        unit =>
          webserver.this.log s "got confirm_registration send 302 success"
          response 302 "Location: /registration_successful" (list i8).empty
        e error =>
          webserver.this.log s "got confirm_registration send 302 failure: "+e
          response 302 "Location: /registration_failed" (list i8).empty

    else if raw_path = "/robots.txt"
      res := content.templates_dir.resolve "robots.txt"
      x := io.file.use (array u8) res.toString io.file.mode.read ()->
          (io.buffered io.file.file_mutate).read_fully

      match x
        robots_txt array u8 =>
          send_ok cmd (String.from_bytes robots_txt)
        error =>
          logger.log "robots.txt could not be read."
          response 500 "" (list i8).empty

    else if raw_path = "/goto"
      match form_data["page"]
        page String =>
          match content.get_contents s page
            forbidden => webserver.this.log s "*** forbidding access to absolute or non-normalized path {page}."
            missing => webserver.this.log s "error: requested file {page} does not exist"
            i identifier =>
              match i.simple_path
                sp String =>
                  s.set_current sp
                  s.send_content
                nil =>
        nil =>
      send_ok_or_reload cmd s
    else if raw_path = "/run"
      send_nyi
    else if raw_path = "/runeff"
      send_nyi
    else if raw_path = "/playground"
      send_nyi
    else if raw_path = "/events"
      # send one byte to trigger javascript event
      b array i8 := [0]
      response 200 "Cache-Control: no-cache\nConnection: keep-alive\nContent-Type: text/event-stream\n" b s
    else if raw_path = "/contents"
      s.send_content
      s.send_login_status
      send_ok_or_reload cmd s
    else if raw_path = "/api/benchmark/logs"
      send_nyi
    else
      perform_direct_login s form_data
      path := decode_path raw_path
      match content.get_contents s path
        forbidden =>
          webserver.this.log s "*** forbidding access to absolute or non-normalized path {path}."
          response 403 "" (list i8).empty
        missing =>
          webserver.this.log s "*** error: requested file {path} does not exist"
          response 404 "" (list i8).empty
        i identifier => send_content s cmd i


# perform a login alongside an ordinary request
#
perform_direct_login (s Session, form_data lock_free.Map String String) =>
  l := form_data["login"]
  p := form_data["password"]

  if l?? && (p??)
    webserver.this.log s "Direct login: for {l.get}"
    s.login l.get p.get
