# -----------------------------------------------------------------------
#
#  Tokiwa Software GmbH, Germany
#
#  Source code of Fuzion webserver feature connection_handler
#
# -----------------------------------------------------------------------

# contains convenient access of request
# like header fields, a send feature etc.
#
request_context (LM type : mutate, connection net.connection) is
  request := (http.read_request LM).get

  path => (request.target.split "?").first.get
  query_string => ((request.target.split "?").drop 1).first ""

  client =>
    match net.channel.env.get_peer_address
      x Sequence u8 => x.as_list
      error => [u8 0, 0, 0, 0].as_list

  send(return_code i32, attributes String, data array u8) is
    header := """
      HTTP/1.1 $return_code OK
      Connection: close
      Server: Fuzion WebServer v0.0.2
      {attributes}
    """
    header_ok := (io.buffered LM).writer.env.write header.utf8.as_array

    match header_ok.error
      e error => say "#### {e}"
      unit =>
        data_ok := (io.buffered LM).writer.env.write data
        if data_ok.error!!
          say "#### {data_ok.error.err}"
        flush_ok := (io.buffered LM).writer.env.flush
        if flush_ok!!
          say "#### {flush_ok.err}"


# entry point to the handling the request
#
module handle_connection (LM type : mutate, conn net.connection) unit =>
  req_context := request_context LM conn
  say "{req_context.request.method} {req_context.request.target}"

  process_request LM req_context


# helper to process the request
#
process_request(LM type : mutate, req_context request_context LM) =>
  # compute response
  get_response(cmd String) =>
    post_len =>
      match (req_context.request.header["Content-Length"].or_else "0").parse_i32
        error => 0
        i i32 => i
    post_data := String.from_bytes ((io.buffered LM).read_bytes post_len).as_list
    val := (Java.dev.flang.webserver_S_Value_static.new (req_context.request.header["Content-Type"].or_else ""))
    content_type := val.getType
    content_type_boundary := val.getBoundary
    form_data := get_form_data post_data cmd req_context.query_string content_type content_type_boundary

    match form_data
      x (lock_free.Map String String) =>
        route_request req_context.path cmd req_context.client x req_context.query_string
      error =>
        response 415 "Accept: application/x-www-form-urlencode, multipart/form-data\n" (list i8).empty

  resp := match req_context.request.method
    http.get => get_response "GET"
    http.post_r => get_response "POST"
    * => response 500 "" (list i8).empty

  _ := req_context.send resp.returncode resp.attributes (resp.data.as_array.map_to_array (.cast_to_u8))
  match resp.session
    nil =>
    s Session =>
      s.set_connection req_context.connection
