# -----------------------------------------------------------------------
#
#  Tokiwa Software GmbH, Germany
#
#  Source code of Fuzion webserver feature connection_handler
#
# -----------------------------------------------------------------------

GET is
POST is
UNKNOWN is

request_method : choice GET POST UNKNOWN is
  redef as_string =>
    match request_method.this
      GET => "GET"
      POST => "POST"
      UNKNOWN => "UNKNOWN"


# contains convenient access of request
# like header fields, a send feature etc.
#
request_context (LM type : mutate, connection net.connection) is
  read_header String =>
    header_lines := io.buffered.read_line_while LM (s -> !s.is_empty)
    String.from_codepoints (header_lines.as_codepoints.drop_while (x -> x = "\n"))

  http_header_map(s String) container.Map String String =>
    res := s
      .split "\n"
      .map (x -> (x.find " ").bind (tuple String String) (idx -> (x.substring 0 idx, x.substring idx+1 x.byte_length)))
      .filter (x -> x.exists)
      .map (x -> x.get)
      .as_array
    (container.ps_map String String).new (res.map x->x.values.0) (res.map x->x.values.1)

  head(method request_method, url String, http_headers container.Map String String) is
    path => (url.split "?").first.get
    query_string => ((url.split "?").drop 1).first ""

  _head := once LM head ()->
    s := read_header
    method request_method := if s.starts_with "GET" then GET else if s.starts_with "POST" then POST else UNKNOWN
    url := String.from_codepoints (s
      .as_codepoints
      .drop_while (x -> x != " ")
      .drop_while (x -> x = " ")
      .take_while (x -> x != " "))
    line2ff := (s.as_codepoints.drop_while (x ->  x != "\n")).drop 1
    line2ff0 := String.from_codepoints line2ff
    map := http_header_map line2ff0
    head method url map

  head => _head.get

  client =>
    match net.channel.env.get_peer_address
      x Sequence u8 => x.as_list
      error => [u8 0, 0, 0, 0].as_list

  send(return_code i32, attributes String, data array u8) is
    header := """
      HTTP/1.1 $return_code OK
      Connection: close
      Server: Fuzion WebServer v0.0.2
      {attributes}
    """
    header_ok := io.buffered.writer.env.write header.utf8.as_array

    match header_ok.error
      e error => say "#### {e}"
      unit =>
        data_ok := io.buffered.writer.env.write data
        if data_ok.error!!
          say "#### {data_ok.error.err}"
        flush_ok := io.buffered.writer.env.flush
        if flush_ok!!
          say "#### {flush_ok.err}"


# entry point to the handling the request
#
module handle_connection (LM type : mutate, conn net.connection) unit =>
  req_context := request_context LM conn
  say "{req_context.head.method} {req_context.head.url}"

  # calls to java may sometimes trigger panic
  panic
    .try unit ()->
      process_request LM req_context
    .catch m->
      say "handling request, got fault: {m}"


# helper to process the request
#
process_request(LM type : mutate, req_context request_context LM) =>
  # compute response
  get_response(cmd String) =>
    post_len =>
      match (req_context.head.http_headers["Content-Length:"].or_else "0").parse_i32
        error => 0
        i i32 => i
    post_data := String.from_bytes (io.buffered.read_bytes LM post_len).as_list
    val := (jflang.webserver_S_Value_static.new (req_context.head.http_headers["Content-Type:"].or_else ""))
    content_type := val.getType
    content_type_boundary := val.getBoundary
    form_data := get_form_data post_data cmd req_context.head.query_string content_type content_type_boundary

    match form_data
      x (lock_free.Map String String) =>
        route_request req_context.head.path cmd req_context.client x req_context.head.query_string
      error =>
        response 415 "Accept: application/x-www-form-urlencode, multipart/form-data\n" (list i8).empty

  resp := match req_context.head.method
    GET => get_response "GET"
    POST => get_response "POST"
    UNKNOWN => response 500 "" (list i8).empty

  _ := req_context.send resp.returncode resp.attributes (resp.data.as_array.map_to_array x->x.as_u8)
  match resp.session
    nil =>
    s Session =>
      s.set_connection req_context.connection
