# -----------------------------------------------------------------------
#
#  Tokiwa Software GmbH, Germany
#
#  Source code of Fuzion webserver feature url_encoded
#
# -----------------------------------------------------------------------

module url_encoded is

  # Decode a URL-encoded string
  #
  module from_urlencoded(data String) String =>

    s(c, i) String =>
        if c = "+"
          " "
        else if c = "%" && (i < data.codepoint_length - 2)
          # Convert a hexadecimal character to an integer
          h := encodings.base16.decode_str ((data.substring i+1 i+3).upper_case)

          if h.ok
            val := h.val[0].as_u32
            codepoint val
          else
            panic "Encoding error: not a hex digit"
        else
          ""
    for res := "", res+(s c i)
        c in data.as_codepoints
        i := 0, i + 1
    else
      res


  # Parse URL-encoded form data into a map
  #
  module parse_urlencoded_map(data String) lock_free.Map String String =>

    pairs := data.split "&"
    form_data := (lock_free.Map String String).empty
    for p in pairs do
      nv := p.split "="
      name := (from_urlencoded nv.first.get).trim
      _ := form_data.add name (if nv.count < 2 then "" else from_urlencoded (nv.drop 1).first.get)
    form_data


  # Strip non-alphanumeric characters from a string
  #
  module strip_non_alpha_numeric(s String) String =>

    for res := "", (if (("0" <= c) && (c <= "9")) || ("a" <= c && c <= "z") || ("A" <= c && c <= "Z") || c = "_"
                      res + c
                    else
                      res + "_")
        c in s.as_codepoints
        i := 0, i + 1
    else
      res


  # HTML-encode a string
  #
  module html_encode(s String) String =>

    for res := "", (if c = "32"
                      res + "&nbsp;"
                    else if c = "38"
                      res + "&amp;"
                    else if c = "60"
                      res + "&lt;"
                    else if c = "62"
                      res + "&gt;"
                    else if c = "34"
                      res + "&quot;"
                    else if c = "39"
                      res + "&#x27;"
                    else if c = "47"
                      res + "&#x2F;"
                    else
                      res + c)
        c in s.as_codepoints
        i := 0, i + 1
    else
      res


  # Encode HTML data with newlines preserved
  #
  module encode_html_data(s String) String =>

    for res := "data: ", (if c = "10"
                            res + "\ndata: "
                          else
                            res + html_encode(c))
        c in s.as_codepoints
        i := 0, i + 1
    else
      res := res + "\n"
      res
