# -----------------------------------------------------------------------
#
#  Tokiwa Software GmbH, Germany
#
#  Source code of Fuzion webserver feature config_file
#
# -----------------------------------------------------------------------

# config_file -- handle config files read and written by the Fuzion
# webserver
#
module config_file (values lock_free.map String String, path String) is

  # get the value corresponding to the given key in this config
  #
  module get (s String) =>
    values[s]


  # update or create a new key in the config file
  #
  module set0 (key, val String) =>
    values.add key val


  # remove a key from the config file
  #
  module remove (key String) =>
    values.remove key


  # save the config file as it is currently in memory to
  # its path
  #
  module save =>
    res := lm.instate_self (outcome unit) ()->
      io.file.use unit lm path io.file.mode.write ()->
        data := values.items
                      .map (e -> "{e.0}: {e.1}")
                      .as_string "\n"
        ((io.buffered.writer lm).write data.utf8).error

    match res
      unit => unit
      e error => say "Writing to config file {path} failed: {e}."


  # open the config file located at the given path p
  #
  # if p cannot be read, for example because it does not exist,
  # no error is raised and an internal representation of an
  # empty config is created
  #
  module type.open (p String) config_file =>
    m := (lock_free.map String String).empty

    # ignore any errors here.
    # config file can still be populated and created.
    _ := lm.instate_self ()->
      _ := io.file.use unit lm p io.file.mode.read ()->
        data := io.buffered.read_fully lm
        lines := String.from_bytes data
        lines.split "\n"
             .for_each line->
               match line.find ":"
                 colon i32 =>
                   key := (line.substring 0 colon).trim
                   val := (line.substring (colon + 1)).trim
                   m.add key val
                 nil => unit

    config_file m p


# local mutate effect used in this file
#
lm : mutate is
